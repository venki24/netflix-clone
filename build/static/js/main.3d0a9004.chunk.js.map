{"version":3,"sources":["requests.js","axios.js","Banner.js","Row.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","get","Banner","useState","movie","setMovie","useEffect","a","axios1","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","name","title","original_name","overview","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","alt","id","videoId","opts","hieght","width","playerVars","autoplay","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d0a9004.chunk.js","sourcesContent":["const API_KEY='94a7d882cc7a273615adfb459b9a64d2';\r\n\r\nconst requests={\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,    \r\n\r\n\r\n}\r\n\r\nexport default requests;\r\n","import axios from 'axios';\r\n//Base url to make requests to the movie database\r\n\r\nconst instance=axios.create({\r\n    baseURL:'https://api.themoviedb.org/3'\r\n})\r\n\r\n\r\naxios.get('/foobar')\r\n//Above one is https://api.themoviedb.org/3/foobar\r\n//We are initailised base url and we attaching what file we want to url\r\n\r\n\r\nexport default instance;","\r\nimport React,{useState,useEffect} from 'react'\r\nimport requests from './requests';\r\nimport axios1 from './axios'\r\nimport './Banner.css';\r\nfunction Banner() {\r\n    const [movie,setMovie]=useState([]);\r\n    useEffect(()=>{\r\nasync function fetchData(){\r\n   const request=await axios1.get(requests.fetchNetflixOriginals)\r\n   \r\n    setMovie(request.data.results[\r\n        Math.floor(Math.random()*request.data.results.length)\r\n     ]);\r\n     return request;\r\n   \r\n}\r\nfetchData()\r\n    },[])\r\nconsole.log(movie)\r\n\r\n    return (\r\n        <header className='banner'\r\n        style={{backgroundSize:'cover',\r\n        backgroundImage:`url(\r\n           \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n        )`,\r\n        backgroundPosition:'center center',\r\n        }}>\r\n            <div className='banner__contents'>\r\n                <h1 className='banner__title'>{movie?.name || movie?.title || movie?.original_name}</h1>\r\n            <div className=\"banner__buttons\">\r\n                <button className='banner__button'>Play</button>\r\n                <button className='banner__button'>My List</button>\r\n\r\n            </div>\r\n            <h1 className='banner__description'>{movie?.overview}</h1>\r\n            \r\n            </div>\r\n            \r\n            \r\n            \r\n            \r\n             {/*Background Image */}\r\n            {/*Titile */}\r\n            {/*Div with two Btn */}\r\n            {/*Description */}\r\n            <div className='banner--fadeBottom'></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React ,{useState,useEffect}from 'react'\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\n\r\nconst base_url=\"https://image.tmdb.org/t/p/original\";\r\n\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n   const[movies,setMovies]= useState([]);\r\n   const [trailerUrl ,setTrailerUrl]=useState('')\r\n\r\n    //We need a snippet of code runs based on specific conditions\r\nuseEffect(()=>{\r\n    async function fetchData(){\r\n        const request=await axios.get(fetchUrl)\r\n        //https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\r\n\r\n        setMovies(request.data.results);\r\n        return request;\r\n\r\n    }\r\n    fetchData();\r\n\r\n},[fetchUrl]) \r\n\r\nconst opts={\r\n    hieght:'390px',\r\n    width:'100%',\r\n    playerVars:{\r\n        autoplay:1,\r\n    }\r\n}\r\n\r\nconst handleClick=(movie)=>{\r\n    if(trailerUrl){\r\n        setTrailerUrl('');\r\n    }\r\n    else {\r\n        movieTrailer(movie?.name ||'')\r\n        .then((url)=>{\r\n               const urlParams=new URLSearchParams(new URL(url).search);\r\n               setTrailerUrl(urlParams.get('v'));// you will get ths value (XtMThy8QKqU&t=9307s) if we assume below  yt link\r\n               //https://www.youtube.com/watch?v=XtMThy8QKqU&t=9307s\r\n               //By using above code we are extraction a text after ? in youtube link that is the unique link of each youtube video\r\n\r\n        })\r\n        .catch((error)=>{\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n}\r\n\r\n//If we put [] run once when the Row Comp Loads and dont run again\r\n//Whenever you pulled a varibale from outside useeffect\r\n//Here we pulling fetchUrl we need to put that var in [ftechUrl] like this\r\n//Becaouse it is dependedn on fetchUrl variable and in simple wordswe are telling useEffect  if something change is fetchUrl to rerun the useEffect\r\n\r\nconsole.log(movies)\r\n    return (\r\n        <div className='row'>\r\n            <h1>{title}</h1>\r\n            <div className='row__posters'>\r\n            {/*Container => posters*/} \r\n            {movies.map(movie=>(\r\n                <img\r\n                key={movie.id}\r\n                onClick={()=>handleClick(movie)}\r\n                className={`row__poster ${isLargeRow &&\"row__posterLarge\"}`} \r\n                src={`${base_url}${isLargeRow ?movie.poster_path:movie.backdrop_path}`}\r\n                alt={movie.name}/>\r\n            \r\n            ))}\r\n\r\n            </div>\r\n             {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React,{ useState,useEffect } from 'react'\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n    const [show,handleShow]=useState(false);\r\n    useEffect(()=>{\r\n        window.addEventListener('scroll',()=>{\r\n            if(window.scrollY>100){\r\n                handleShow(true);\r\n            }\r\n            else handleShow(false);\r\n        })\r\n        return () =>{\r\n            window.removeEventListener('scroll');\r\n        };\r\n    },[])\r\n\r\n    return (\r\n        <div className={`nav ${show && 'nav__blank'}`}>\r\n            <img className='nav__logo'\r\n            src='http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png'\r\n            alt='NetFLix logo'\r\n            />\r\n            <img className='nav__avatar'\r\n            src='https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png'\r\n            alt='NetFLix logo'\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import Banner from './Banner'\nimport './App.css';\nimport Row from './Row'\nimport requests from './requests';\nimport Nav from'./Nav'\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* Nav bAr*/}\n      {/* Banner */}\n      <Nav/>\n      <Banner/>\n\n      <Row title='NETFLIX ORIGINALS'\n       fetchUrl={requests.fetchNetflixOriginals}\n       isLargeRow={true}\n      />\n      <Row title='Trending Now' fetchUrl={requests.fetchTrending}/>\n      <Row title='Top Rated' fetchUrl={requests.fetchTopRated}/>\n      <Row title='Action Movies' fetchUrl={requests.fetchActionMovies}/>\n      <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies}/>\n      <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}